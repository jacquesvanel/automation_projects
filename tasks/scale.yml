---
# Still in development...
# It is not easy to configure scaling in mongo with Ansible

# The steps should be:
#   - If arbiter is present in configuration and on system
#       - remove arbiter from cluster
#   - Add new secondary or secondaries
#   - Add arbiter if configured

# I have tried configuring this countless amount of times, but always failed
# for some reason. I decided to not include scaling for now.


# - name: scale | check if hosts are in cluster
#   shell: mongo --quiet --eval 'db.isMaster().hosts'
#   register: check_cluster
#   changed_when: false
#
# - name: scale | check if there are arbiters in the cluster
#   shell: mongo --quiet --eval 'db.isMaster().arbiters'
#   register: check_arbiters
#
# - name: scale | set fact to run tasks on primary
#   set_fact:
#     run_on: "{{ item }}"
#   with_items: "{{ play_hosts }}"
#   when: run_on is undefined and hostvars[item].mongo_primary
#   run_once: true
#
# - block:
#
#     - name: assert | create dictionary of arbiters
#       set_fact:
#         arb_check: "{{ dict(keys|zip(values)) }}"
#       vars:
#         keys: "{{ ansible_play_hosts }}"
#         values: "{{ ansible_play_hosts|
#                     map('extract', hostvars, ['mongo_arbiter']) |
#                     list }}"
#
#     - name: assert | create dictionary of arbiter system check
#       set_fact:
#         arb_system_check: "{{ dict(keys|zip(values)) }}"
#       vars:
#         keys: "{{ ansible_play_hosts }}"
#         values: "{{ ansible_play_hosts|
#                     map('extract', hostvars, ['arb_check_stdout']) |
#                     list }}"
#
#     - name: assert | create list of arbiters
#       set_fact:
#         arbiter_system_check: "{{ arb_system_check | dict2items |
#                                   selectattr('value') |
#                                   map(attribute='key') |
#                                   list }}"
#
#     - name: assert | set fact if there is an arbiter in the play
#       set_fact:
#         arbiter_present: true
#       when: arb_check.values() | list is any
#
#     - name: assert | set fact if there is no arbiter in the play
#       set_fact:
#         arbiter_present: false
#       when: arb_check.values() | list is not any
#
#     - name: assert | set fact if the cluster has an arbiter present
#       set_fact:
#         arbiter_system_present: true
#       when: arb_system_check.values() | list is any
#
#     - name: assert | set fact if the cluster has no arbiter
#       set_fact:
#         arbiter_system_present: false
#       when: arb_system_check.values() | list is not any
#
#   run_once: true
#
# - meta: end_play
# - block:
#
#     - name: scale | set fact for current hosts in cluster, without arbiter
#       set_fact:
#         current_cluster_hosts: "{{ check_cluster.stdout |
#           regex_replace(':[0-9]*','') }}"
#       when: inventory_hostname == run_on
#
#     - name: scale | build current member list, without arbiter
#       set_fact:
#         current_members: >-
#           {{
#             current_members | default([]) +
#             [{
#               'host': item + ':' +
#                mongo_port[hostvars[item].mongo_replication_role],
#               'priority': member_weight[hostvars[item].mongo_replication_role]
#             }]
#           }}
#       loop: "{{ current_cluster_hosts }}"
#       vars:
#         mongo_port:
#           primary: "{{ mongo_net.port }}"
#           secondary: "{{ mongo_net.port }}"
#         member_weight:
#           primary: 3
#           secondary: 2
#       when: inventory_hostname == run_on
#
#     - name: scale | reconfigure cluster with current hosts
#       community.mongodb.mongodb_replicaset:
#         login_host: localhost
#         login_port: "{{ mongo_net.port }}"
#         login_user: admin
#         login_password: "{{ mongo_admin_pass }}"
#
#         replica_set: "{{ mongo_replication.replSetName }}"
#         reconfigure: true
#         force: true
#         members: "{{ current_members }}"
#       when: mongo_primary
#
#     - name: scale | wait until cluster health is ok
#       community.mongodb.mongodb_status:
#         login_host: localhost
#         login_port: "{{ mongo_net.port }}"
#         login_user: admin
#         login_password: "{{ mongo_admin_pass }}"
#
#         validate: minimal
#         poll: 5
#         interval: 12
#         replica_set: "{{ mongo_replication.replSetName }}"
#       when: mongo_primary
#
#   when:
#     - arbiter_present
#     - arbiter_system_present
#
# # To speed up development proces, set this staticly
# - name: scale | set fact for host list without arbiter
#   set_fact:
#     host_without_arb:
#       - test-multi-01
#       - test-multi-03
#       - test-multi-04
#
# - name: scale | build new member list to include new secondary
#   set_fact:
#     new_members: >-
#       {{
#         new_members | default([]) +
#         [{
#           'host': item + ':' +
#            mongo_port[hostvars[item].mongo_replication_role],
#           'priority': member_weight[hostvars[item].mongo_replication_role]
#         }]
#       }}
#   loop: "{{ host_without_arb }}"
#   when: inventory_hostname == run_on
#   vars:
#     mongo_port:
#       primary: "{{ mongo_net.port }}"
#       secondary: "{{ mongo_net.port }}"
#     member_weight:
#       primary: 3
#       secondary: 2
#
# - name: scale | reconfigure cluster to include the new secondary
#   community.mongodb.mongodb_replicaset:
#     login_host: localhost
#     login_port: "{{ mongo_net.port }}"
#     login_user: admin
#     login_password: "{{ mongo_admin_pass }}"
#
#     replica_set: "{{ mongo_replication.replSetName }}"
#     reconfigure: true
#     members: "{{ new_members }}"
#     force: true
#   when: mongo_primary
#
# - name: scale | wait until cluster health is ok
#   community.mongodb.mongodb_status:
#     login_host: localhost
#     login_port: "{{ mongo_net.port }}"
#     login_user: admin
#     login_password: "{{ mongo_admin_pass }}"
#
#     validate: default
#     poll: 5
#     interval: 12
#     replica_set: "{{ mongo_replication.replSetName }}"
#   when: mongo_primary
#
# - name: scale | block to inclue the arbiter if set
#   block:
#
#     - name: scale | build member list including all hosts
#       set_fact:
#         members: >-
#           {{
#             members | default([]) +
#             [{
#               'host': item + ':{{ mongo_net.port }}',
#               'priority': member_weight[hostvars[item].mongo_replication_role]
#             }]
#           }}
#       loop: "{{ ansible_play_hosts }}"
#       run_once: true
#       vars:
#         member_weight:
#           primary: 3
#           secondary: 2
#           arbiter: 1
#
#     - name: cluster | set fact for arbiter index number
#       set_fact:
#         arbiter_index: "{{ hostid }}"
#       when: hostvars[item].mongo_arbiter
#       loop: "{{ ansible_play_hosts }}"
#       loop_control:
#         index_var: hostid
#
#     - name: scale | reconfigure cluster to include the arbiter
#       community.mongodb.mongodb_replicaset:
#         login_host: localhost
#         login_port: "{{ mongo_net.port }}"
#         login_user: admin
#         login_password: "{{ mongo_admin_pass }}"
#
#         replica_set: "{{ mongo_replication.replSetName }}"
#         reconfigure: true
#         members: "{{ members }}"
#       when: mongo_primary
#
#     - name: scale | wait until cluster health is ok
#       community.mongodb.mongodb_status:
#         validate: default
#         poll: 5
#         interval: 12
#         replica_set: "{{ mongo_replication.replSetName }}"
#       when: mongo_primary
#
#   when: arbiter_present
