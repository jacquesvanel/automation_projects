---
- name: find all automation files associated with mongo
  find:
    paths:
      - "/data/{{ env }}/config/rs_a/"
      - "/data/{{ env }}/config/rs_b/"
      - "/data/{{ env }}/config/rs_c/"
      - "/data/{{ env }}/shard1/rs_a/"
      - "/data/{{ env }}/shard1/rs_b/"
      - "/data/{{ env }}/shard1/rs_c/"
      - "/data/{{ env }}/shard2/rs_a/"
      - "/data/{{ env }}/shard2/rs_b/"
      - "/data/{{ env }}/shard2/rs_c/"
      - "/data/{{ env }}/shard3/rs_a/"
      - "/data/{{ env }}/shard3/rs_b/"
      - "/data/{{ env }}/shard3/rs_c/"
      - "/data/{{ env }}/"
    patterns: "*.conf"
    recurse: yes
  register: conf_files

- debug:
    msg: "{{ conf_files.files | map(attribute='path') | list }}"


- name: Check type of host 
  shell:
    cmd: "cat {{ item }} |  grep -i 'clusterRole'"
  register: role
  with_items: "{{ conf_files.files | map(attribute='path') | list }}"
  #map('regex_replace','\\/usr\\/lib\\/systemd\\/system\\/','')| map('regex_replace','\\/etc\\/systemd\\/system\\/','') | list }}"
  ignore_errors: yes

- name: show server type (SBX envi)
  debug:
    msg: >-
       "{{ ansible_hostname }}" 
        {% if 'shardsvr' in role %}
          is a REPLICASET SERVER 
        {% elif 'configsvr' in role %}
          is a CONFIG SERVER 
        {% else %}
          is a REPLICASET SERVER
        {% endif %}
  ignore_errors: yes
  register: server_type

- name: (service_files.yml) checking mongo config service
  systemd:
    name: mongodb-mms-automation-agent
  register: status

#get status of services
- name: (service_files.yml) status of all services
  debug:
    msg: "The status of {{ item.status.Names }} on {{ ansible_hostname }} is {{ item.status.ActiveState }}"
  with_items: "{{ status.status }}"
  loop_control:
    label: 'status'

#fail if task if service is in innactive or failed state
- name: (service_files.yml) fail module for services
  fail:
    msg: "The status of {{ item.status.Names }} on {{ ansible_hostname }} is {{ item.status.ActiveState }}"
  when: item.status.ActiveState == 'failed'
  loop: "{{ status.status }}"
  loop_control:
    label: 'status'


- name: Run shell to check the mongo services present (SHARDED CLUSTER)
  shell: >-
    {% if 'shardsvr' in role %}
      ps -ef | grep mongod.conf | awk -F " " '{print $10}' | awk 'NR<=3' | awk -F  "/" '{print $4}'
    {% elif 'configsvr' in role %}
      ps -ef | grep mongod | awk -F " " '{print $10}' | awk -F "/" '{print $6}' | awk 'NR<=3'
    {% else %}
      ps -ef | grep mongod.conf | head -1 | awk -F " " '{print $10}' | awk -F "/" '{print $4}'
    {% endif %}
  register: processes

- debug:
    msg: "{{ processes }}"


