---
- name: create partitions
  parted:
    device: /dev/nvme0n1
    state: present
    number: "{{ item.numb }}"
    part_start: "{{ item.start }}"
    part_end: "{{ item.end }}"
  loop: "{{ partitions }}"
  tags: 
    - partitions
    - never

- name: create volume groups
  lvg:
    vg: "{{ item.name }}"
    pvs: "{{ item.devices }}"
  loop: "{{ volume_groups }}"
  tags: volgroup

- name: create logical volume
  lvol:
    vg: "{{ item.v_group }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
    pvs: "{{ item.devices }}"
    force: yes
    state: "{{ item.state }}" 
  loop: "{{ logical_volumes }}"
  #  when: item.name not in ansible_lvm["lvs"]
  tags: logvolume

- name: create filesystem
  filesystem:
    dev: "/dev/{{ item.v_group }}/{{ item.name }}"
    fstype: xfs
  loop: "{{ logical_volumes }}"
  tags: filesystem

- name: ensure the correct size of LV and resize the filesystems
  lvol:
    vg: "{{ item.v_group }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
    resizefs: yes
    force: yes
  loop: "{{ logical_volumes }}"
  tags: resize

- name: mount volumes
  mount:
    path: "{{ item.mount_path }}"
    src: "/dev/{{ item.v_group }}/{{ item.name }}"
    fstype: xfs
    opts: noatime
    state: mounted
  loop: "{{ logical_volumes }}"
  tags: mount

- block:
  - name: initialize empty list for devices
    set_fact:
      storage_devices: []
      no_log: true

  - name: get SATA and NVMe devices
    set_fact:
      storage_devices: "{{ storage_devices + [item.key] }}"
    no_log: true
    with_dict: "{{ ansible_devices }}"
    when: "item.value.host.startswith('SATA controller:') or
           item.value.host.startswith('Non-Volatile memory controller:')"

  - name: show all values for selected devices
    debug: "msg="{{ ansible_devices[item] }}""
    loop: "{{ storage_devices }}"

  - name: show devices names
    debug: var=storage_devices

  - name: show first SATA or NVMe device in the list
      debug: var=storage_devices[0]
  tags: devices
