---
- name: list volume groups
  debug:
    msg: |
       "echo volume groups is  {{ item.key }}"
       "free_g is {{ item.value.free_g }}"
       "size is {{ item.value.size_g }}"
       "num_lvs is {{ item.value.num_lvs }}"
       "num_pvs is {{ item.value.num_pvs }}"
  with_dict: "{{ ansible_lvm.vgs }}"
  tags:
    - vgs
      
- name: create partitions
  parted:
    device: /dev/nvme0n1
    state: present
    number: "{{ item.numb }}"
    part_start: "{{ item.start }}"
    part_end: "{{ item.end }}"
  loop: "{{ partitions }}"
  tags: 
    - partitions
    - never

- name: create volume groups
  lvg:
    vg: "{{ item.name }}"
    pvs: "{{ item.devices }}"
  loop: "{{ volume_groups }}"
  tags: volgroup

- name: create logical volume
  lvol:
    vg: "{{ item.v_group }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
    pvs: "{{ item.devices }}"
    force: yes
    state: "{{ item.state }}" 
  loop: "{{ logical_volumes }}"
  #  when: item.name not in ansible_lvm["lvs"]
  tags: logvolume

- name: create filesystem
  filesystem:
    dev: "/dev/{{ item.v_group }}/{{ item.name }}"
    fstype: xfs
  loop: "{{ logical_volumes }}"
  tags: filesystem

- name: ensure the correct size of LV and resize the filesystems
  lvol:
    vg: "{{ item.v_group }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
    resizefs: yes
    force: yes
  loop: "{{ logical_volumes }}"
  tags: resize

- name: mount volumes
  mount:
    path: "{{ item.mount_path }}"
    src: "/dev/{{ item.v_group }}/{{ item.name }}"
    fstype: xfs
    opts: noatime
    state: mounted
  loop: "{{ logical_volumes }}"
  tags: mount

- name: get devices
  import_tasks: devices.yml
  tags: devices
