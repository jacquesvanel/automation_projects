---
#CHECKING THE TYPE OF MONGODB IN PROD
- name: Check type of host (for PROD envi)
  shell:
    cmd: " cat /etc/mongo//pte_defunct_managed_by_ops_now/rs_a.cfg | grep -i 'clusterRole: configsvr' "
  register: config_proda
  when:
    - envi.stdout == "prod"
    - config_file_rs_a_prod.stat.exists

- name: Check type of host (for PROD shard1_rs_a envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_proda
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_a_prod.stat.exists
  ignore_errors: yes

- name: Check type of host (for PROD envi)
  shell:
    cmd: " cat /etc/mongo/pte_defunct_managed_by_ops_now/rs_b.cfg | grep -i 'clusterRole: configsvr' "
  register: config_prodb
  when:
    - envi.stdout == "prod"
    - config_file_rs_b_prod.stat.exists

- name: Check type of host (for PROD shard1_rs_b envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_prodb
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_b_prod.stat.exists
  ignore_errors: yes

- name: Check type of host (for PROD envi)
  shell:
    cmd: " cat /etc/mongo/pte_defunct_managed_by_ops_now/rs_c.cfg | grep -i 'clusterRole: configsvr' "
  register: config_prodc
  when:
    - envi.stdout == "prod"
    - config_file_rs_c_prod.stat.exists

- name: Check type of host (for PROD shard1_rs_c envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_prodc
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_c_prod.stat.exists
  ignore_errors: yes



###### SHARDED SERVER CHECK
- name: show server type (PROD envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is PART OF A SHARDED CLUSTER"
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_a_prod.stat.exists
    - "'shardsvr' in shard_proda.stdout"
  ignore_errors: yes
  register: sharded_server_type_a_prod

- name: show server type (PROD envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is PART OF A  SHARDED CLUSTER"
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_b_prod.stat.exists
    - "'shardsvr' in shard_prodb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_prod

- name: show server type (PROD envi shard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is a PART OF SHARDED CLUSTER"
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_c_prod.stat.exists
    - "'shardsvr' in shard_prodc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_prod


##### REPLICASET SERVER CHECK
- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a STAND ALONE MONGODB SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_a_prod.stat.exists
    - config_proda.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_a_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a STAND ALONE MONGODB SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_b_prod.stat.exists
    - config_prodb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a STAND ALONE MONGODB SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_c_prod.stat.exists
    - config_prodc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_prod



 #### CONFIG SERVER CHECK
- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_a_prod.stat.exists
    - "'configsvr' in config_proda.stdout"
  ignore_errors: yes
  register: config_server_type_a_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_b_prod.stat.exists
    - "'configsvr' in config_prodb.stdout"
  ignore_errors: yes
  register: config_server_type_b_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "prod"
     - config_file_rs_a_prod.stat.exists
    - "'configsvr' in config_prodc.stdout"
  ignore_errors: yes
  register: config_server_type_c_prod


 #### OPS MANAGER CHECK #####

- name: Checking if OPS-MANAGER IS INSTALLED OR NOT
  shell:
    cmd: systemctl status mongo* | grep -i mongodb-mms-automation-agent.service | head -1 | awk -F " " '{print $2}'
  register: ops_manager_check
- name: Fail in case ops manager is not present
  fail:
    msg: " OPS MANAGER AGENT IS NOT INSTALLED ON {{ ansible_hostname }} "
  when: "'mongodb-mms-automation-agent.service' not in ops_manager_check.stdout"

- name: Check if OPS-MANAGER AGENT IS RUNNING OR NOT
  shell:
    cmd: systemctl status mongodb-mms-automation-agent.service | awk 'NR<=3' | grep -i running | awk -F " " '{print $3}' | sed 's/(//g' | sed 's/)//g'
  register: ops_manager_status
  when: ops_manager_check.stdout == "mongodb-mms-automation-agent.service"

- name: Fail in case ops manager is not present or running
  fail:
    msg: " OPS MANAGER AGENT IS NOT RUNNING ON {{ ansible_hostname }} "
  when: "'running' not in ops_manager_status.stdout"



    ##### CHECKING MONGO PROCESSES STATUS ######

- name: Run shell to check the mongo services present(SHARDED CLUSTER)
  shell:
    cmd: ps -ef | grep /var/lib/mongodb-mms-automation/mongodb-linux-x86_64-5.0.13-ent/bin/mongod | awk -F " " '{print $10}' | awk 'NR<=3' | awk -F  "/" '{print $4}'
  register: sharded_processes_prod
  when: (sharded_server_type_a_prod is not skipped) or (sharded_server_type_b_prod is not skipped) or (sharded_server_type_c_prod is not skipped) and (ops_manager_check.stdout == "mongodb-mms-automation-agent.service") and (ops_manager_status.stdout == "running")


- name: Run shell to check the mongo services present (CONFIG SERVER)
  shell:
    cmd: ps -ef | grep /var/lib/mongodb-mms-automation/mongodb-linux-x86_64-5.0.13-ent/bin/mongos | awk -F " " '{print $10}' | awk -F "/" '{print $6}' | awk 'NR<=3'
  register: config_process_prod
  when: (config_server_type_a_prod is not skipped) or (config_server_type_b_prod is not skipped) or (config_server_type_c_prod is not skipped) and (ops_manager_check.stdout == "mongodb-mms-automation-agent.service") and (ops_manager_status.stdout == "running")

- name: Run shell to check the mongo services prsent (STAND ALONE SERVER)
  shell:
    cmd: ps -ef | grep /var/lib/mongodb-mms-automation/mongodb-linux-x86_64-5.0.13-ent/bin/mongod | head -1 | awk -F " " '{print $10}' | awk -F "/" '{print $4}'
  register: stand_alone_process_prod
  when:
    - sharded_processes_prod is not skipped
    - config_process_prod is not skipped
    - ops_manager_check.stdout == "mongodb-mms-automation-agent.service"
    - ops_manager_status.stdout == "running"
    - envi.stdout == "prod"    
