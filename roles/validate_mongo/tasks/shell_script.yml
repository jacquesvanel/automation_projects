---
###########################################################################
#Check if server is primary or secondary server
#- name: check if server is primary or secondary
#  shell: mongo "{{ ansible_hostname }}".opr.afsiep.net:37018/admin -u amkanda -p Qwerty#12345px  --eval 'rs.isMaster().secondary' | sort -r | head -1
#  register: secondary

#- debug:
#    msg: "{{ secondary.stdout }}"

#Run mongo cmd that gets DB Names
- name: (shell_script.yml) run shell command
  shell: mongo "{{ ansible_hostname }}":37018/admin -u "{{ svc_ansible_automation }}" -p "{{ svc_ansible_automation_password }}" --authenticationDatabase admin --eval 'db.getMongo().getDBNames()' | sed -e '1,4d'| tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d'
  register: shell_result

- name: (shell_script.yml) show cmd output
  debug:
    msg: "{{ shell_result.stdout }}"

###########################################################################
#run cmd that gets collection names    
- name: (shell_script.yml) run 2nd command
  shell: mongo "{{ ansible_hostname }}":37018/admin -u "{{ svc_ansible_automation }}" -p "{{ svc_ansible_automation_password }}" --authenticationDatabase admin --eval 'db.getCollectionNames()' | grep '\"'| sed '/UUID/d' | tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d'
  register: shell2_result

- name: (shell_script.yml) show cmd output
  debug:
    msg: "{{ shell2_result.stdout }}"

############################################################################
#make sure directory exists
- name: (shell_script.yml) check if dir exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/
  register: dir

- name: (shell_script.yml) make file directory
  file:
    path: /etc/mongo/{{ env }}/scripts/
    state: directory
    #    mode: "{{ item.mode }}"
    #    owner: "{{ owner }}"
    #    group: "{{ group }}"
  when: not dir.stat.exists

- name: (shell_script.yml) check if pre validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/pre_MongoDB_Validate{{ ansible_date_time.date }}.txt
  register: file

- name: (shell_script.yml) check if post validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/post_MongoDB_Validate{{ ansible_date_time.date }}.txt
  register: file2
###########################################################################
#copy output to file and display in ansible output 

- name: (shell_script.yml) Copy the output of the data check into /etc/mongo
  copy:
    content: |
            EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE
            {{ shell_result.stdout }}
            COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE
            {{ shell2_result.stdout }}
    dest: "/etc/mongo/{{ env }}/scripts/pre_MongoDB_Validate{{ ansible_date_time.date }}.txt"
  when: not file.stat.exists

- name: (shell_script.yml) Copy the output of the data check into /etc/mongo
  copy:
    content: |
            EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE
            {{ shell_result.stdout }}
            COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE
            {{ shell2_result.stdout }}
    dest: "/etc/mongo/{{ env }}/scripts/post_MongoDB_Validate{{ ansible_date_time.date }}.txt"
  when: file.stat.exists

- debug:
    msg:
      - "EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE"
      - "{{ shell_result.stdout.split('\n') }}"
      - "COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE"
      - "{{ shell2_result.stdout.split('\n') }}"

- name: (shell_script.yml) check if pre validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/pre_MongoDB_Validate{{ ansible_date_time.date }}.txt
  register: file

- name: (shell_script.yml) check if post validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/post_MongoDB_Validate{{ ansible_date_time.date }}.txt
  register: file2

- block:
  - name: (shell_script.yml) Generate diff
    shell: diff  /etc/mongo/{{ env }}/scripts/pre_MongoDB_Validate{{ ansible_date_time.date }}.txt  /etc/mongo/{{ env }}/scripts/post_MongoDB_Validate{{ ansible_date_time.date }}.txt
    register: diff_result
    ignore_errors: yes

  - name: (shell_script.yml) Show diff result
    debug:
      msg: "{{ diff_result.stdout_lines }}"

  - name: (shell_script.yml) fail module
    fail:
      msg: |-
           "Mongodb files are different from eachother"
           "{{ diff_result.stdout_lines }}"
    when: diff_result.rc !=0
  when: file.stat.exists and file2.stat.exists

# delete old files older than 90 days
- name: (shell_script.yml) find files older the 90 days old
  find:
    paths: "/etc/mongo/{{ env }}/scripts/"
    patterns: "*MongoDB_Validate*"
    age: 90d
    recurse: yes
  register: validate

- name: (shell_script.yml) remove files more then 90days old
  file: 
    path: "{{ item.path }}"
    state: absent
  loop: "{{ validate.files }}"
  loop_control:
    label: 'validate'
