---
####### find all conf files and place them in a list ###########
- name: find all automation files associated with mongo
  find:
    paths:
      - "/data/{{ env }}/"
    patterns: "*.conf"
    recurse: yes
  register: conf_files

- debug:
    msg: "{{ conf_files.files | map(attribute='path') | list }}"

####### run shell command against every entry in the list ########
- name: Check type of host 
  shell:
    cmd: "cat {{ item }} | grep clusterRole | sed 's/clusterRole: //g'"
  register: server_role
  with_items: "{{ conf_files.files | map(attribute='path') | list  }}"
  #map('regex_replace','\\/usr\\/lib\\/systemd\\/system\\/','')| map('regex_replace','\\/etc\\/systemd\\/system\\/','') | list }}"
  ignore_errors: yes

######  map the stdout to a variable and only choose the first entry #######
- name: Extract clusterRole from output
  set_fact:
    cluster_role: "{{ server_role.results | map(attribute='stdout') | list | first }}"
###### show the entry #######
- debug:
    var: cluster_role

##### print debug msg using conditional #####
- name: show server type 
  debug:
    msg: >
       "{{ ansible_hostname }}"
       {% if 'shardsvr' in cluster_role %} is a SHARD SERVER
       {% elif 'configsvr' in cluster_role %} is a CONFIG SERVER
       {% else %} is a REPLICASET SERVER{% endif %} 
  ignore_errors: yes
  register: server_type

###### run shell command depending on the output thats in cluster_role #######
- block:
  - name: Run shell to check the mongo services present 
    shell: 
      cmd: ps -ef | grep mongod.conf | grep -v grep | awk -F " " '{print $10}'
    register: processes
    #>-
    #  {% if 'shardsvr' in cluster_role %}
    #    ps -ef | grep mongod.conf | head -n -1 | awk -F " " '{print $10}' 
    #  {% elif 'configsvr' in cluster_role %}
    #    ps -ef | grep mongod.conf | head -n -1 | awk -F " " '{print $10}' 
    #  {% else %}
    #    ps -ef | grep mongod.conf | head -n -1 | awk -F " " '{print $10}' 
    #  {% endif %}
    
####### show output from that command #####
  - debug:
      var: processes.stdout_lines
  when: service_status.status.ActiveState == 'active'

- block:
  - name: Run shell to check the mongo services present 
    shell:
      cmd:  ps -ef | grep mongos | grep -v grep | awk -F " " '{print $10}'
    register: mongos_processes

####### show output from that command #####
  - debug:
      var: mongos_processes.stdout_lines
  when: "'configsvr' in cluster_role and service_status.status.ActiveState == 'active'"

- name: (processes.yml) check if dir exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/
  register: dir

- name: (processes.yml) make file directory
  file:
    path: /etc/mongo/{{ env }}/scripts/
    state: directory
    #    mode: "{{ item.mode }}"
    #    owner: "{{ owner }}"
    #    group: "{{ group }}"
  when: not dir.stat.exists

- name: (processes.yml) check if pre validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/pre_mongodb_validate_processes{{ ansible_date_time.date }}.txt
  register: file

- name: (processes.yml) check if post validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/post_mongodb_validate_processes{{ ansible_date_time.date }}.txt
  register: file2
###########################################################################
#copy output to file and display in ansible output 

- name: (processes.yml) Copy the output of the process check into /etc/mongo
  copy:
    content: |
            EXISTING PROCESSES ON {{ ansible_hostname }} SERVER ARE
            {{ processes.stdout_lines.split('\n') }}
            {% if 'configsvr' in cluster_role %}
            {{ mongos_processes.stdout_lines.split('\n') }}
            {% endif %}
    dest: >
          {% if not file.stat.exists %}
          "/etc/mongo/{{ env }}/scripts/pre_mongodb_validate_processes{{ ansible_date_time.date }}.txt"
          {% elif file.stat.exists %}
          "/etc/mongo/{{ env }}/scripts/post_mongodb_validate_processes{{ ansible_date_time.date }}.txt"
          {% endif %}
  #when: not file.stat.exists

#- name: (processes.yml) Copy the output of the process check into /etc/mongo
#  copy:
#    content: |
#            EXISTING PROCESSES ON {{ ansible_hostname }} SERVER ARE
#            {{ processes.stdout_lines.split(\n) }}
#            {% if 'configsvr' in cluster_role %}
#            {{ mongos_processes.stdout_lines.split(\n) }}
#            {% endif %}
#    dest: "/etc/mongo/{{ env }}/scripts/post_mongodb_validate_processes{{ ansible_date_time.date }}.txt"
#  when: file.stat.exists

- debug:
    msg: |
          EXISTING PROCESSES ON {{ ansible_hostname }} SERVER ARE
          {{ processes.stdout_lines | split('\n') }}
          {% if 'configsvr' in cluster_role %}
          {{ mongos_processes.stdout_lines | split('\n') }}
          {% endif %}

- name: (processes.yml) check if pre validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/pre_mongodb_validate_processes{{ ansible_date_time.date }}.txt
  register: file

- name: (processes.yml) check if post validate file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/post_mongodb_validate_processes{{ ansible_date_time.date }}.txt
  register: file2

- block:
  - name: (processes.yml) Generate diff
    shell: diff  /etc/mongo/{{ env }}/scripts/pre_mongodb_validate_processes{{ ansible_date_time.date }}.txt  /etc/mongo/{{ env }}/scripts/post_mongodb_validate_processes{{ ansible_date_time.date }}.txt
    register: diff_result
    ignore_errors: yes

  - name: (processes.yml) Show diff result
    debug:
      msg: "{{ diff_result.stdout_lines }}"

  - name: (processes.yml) fail module
    fail:
      msg: |-
           "Mongodb files are different from eachother"
           "{{ diff_result.stdout_lines }}"
    when: diff_result.rc !=0
  when: file.stat.exists and file2.stat.exists

# delete old files older than 90 days
- name: (processes.yml) find files older the 90 days old
  find:
    paths: "/etc/mongo/{{ env }}/scripts/"
    patterns: "*mongodb_validate*"
    age: 90d
    recurse: yes
  register: validate

- name: (processes.yml) remove files more then 90days old
  file: 
    path: "{{ item.path }}"
    state: absent
  loop: "{{ validate.files }}"
  loop_control:
    label: 'validate'
