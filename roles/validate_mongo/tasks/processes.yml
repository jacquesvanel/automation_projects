---
- name: checking mongo config service
  systemd:
    name: mongodb-mms-automation-agent
  register: service_status

##### get status of service
- name: status of service
  debug:
    msg: "The status of {{ service_status.status.Names }} on {{ ansible_hostname }} is {{ service_status.status.ActiveState }}"

#fail task if service is in failed state
- name:  fail module for services
  fail:
    msg: "The status of {{ service_status.status.Names }} on {{ ansible_hostname }} is {{ service_status.status.ActiveState }}"
  when: service_status.status.ActiveState == 'failed'

####### find all conf files and place them in a list ###########
- name: find all automation files associated with mongo
  find:
    paths:
      - "/data/{{ env }}/"
    patterns: "*.conf"
    recurse: yes
  register: conf_files

- debug:
    msg: "{{ conf_files.files | map(attribute='path') | list }}"

####### run shell command against every entry in the list ########
- name: Check type of host 
  shell:
    cmd: "cat {{ item }} | grep clusterRole | sed 's/clusterRole: //g'"
  register: server_role
  with_items: "{{ conf_files.files | map(attribute='path') | list  }}"
  #map('regex_replace','\\/usr\\/lib\\/systemd\\/system\\/','')| map('regex_replace','\\/etc\\/systemd\\/system\\/','') | list }}"
  ignore_errors: yes

######  map the stdout to a variable and only choose the first entry #######
- name: Extract clusterRole from output
  set_fact:
    cluster_role: "{{ server_role.results | map(attribute='stdout') | list | first }}"
###### show the entry #######
- debug:
    var: cluster_role

##### print debug msg using conditional #####
- name: show server type 
  debug:
    msg: >
       "{{ ansible_hostname }}"
       {% if 'shardsvr' in cluster_role %} is a SHARD SERVER
       {% elif 'configsvr' in cluster_role %} is a CONFIG SERVER
       {% else %} is a REPLICASET SERVER{% endif %} 
  ignore_errors: yes
  register: server_type

###### run shell command depending on the output thats in cluster_role #######
- name: Run shell to check the mongo services present 
  shell: 
    cmd: ps -ef | grep mongod.conf | grep -v grep | awk -F " " '{print $10}'
  #>-
  #  {% if 'shardsvr' in cluster_role %}
  #    ps -ef | grep mongod.conf | head -n -1 | awk -F " " '{print $10}' 
  #  {% elif 'configsvr' in cluster_role %}
  #    ps -ef | grep mongod.conf | head -n -1 | awk -F " " '{print $10}' 
  #  {% else %}
  #    ps -ef | grep mongod.conf | head -n -1 | awk -F " " '{print $10}' 
  #  {% endif %}
  register: processes

####### show output from that command #####
- debug:
    var: processes.stdout_lines

- block:
  - name: Run shell to check the mongo services present (SHARDED CLUSTER)
    shell:
      cmd:  ps -ef | grep mongos | grep -v grep | awk -F " " '{print $10}'
    register: mongos_processes

####### show output from that command #####
  - debug:
      var: mongos_processes.stdout_lines
  when: "'configsvr' in cluster_role"

