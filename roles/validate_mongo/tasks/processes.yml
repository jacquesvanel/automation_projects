---
- block:
  - name: Run shell cmd to check the mongo services present
    shell:
      cmd: ps -ef | grep mongod.conf | grep -v grep | awk -F " " '{print $10}'
    register: processes
  
  - debug:
      var: processes.stdout
  when: service_status.status.ActiveState == 'active'

- block:
  - name: Run shell cmd to check the mongo services present
    shell:
      cmd: ps -ef | grep mongo | grep -v grep | awk -F " " '{print $10}'
    register: processes2
  
  - debug:
      var: processes2.stdout
  when: service_status.status.ActiveState == 'inactive'
  
- block:
  - name: Run shell cmd to check the mongos services present
    shell:
      cmd:  ps -ef | grep mongos | grep -v grep | awk -F " " '{print $10}'
    register: mongos_processes

  - debug:
      var: mongos_processes.stdout_lines
  when: "'configsvr' in cluster_role and service_status.status.ActiveState == 'active'"

- block:
  - name: run shell cmd to get database names
    shell: mongo "{{ ansible_fqdn }}":"{{ port }}"/admin -u "{{ svc_ansible_automation }}" -p "{{ svc_ansible_automation_password }}" --authenticationDatabase admin --eval 'db.getMongo().getDBNames()' | tail -n +5 | tr ' ' '\n' | tr -d '[],' | awk NF | sed 's/\"//g' #| sed -e '1,4d'| tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d'
    register: shell_result
  
  - name:  show cmd output
    debug:
      var: shell_result.stdout
###########################################################################
#run cmd that gets collection names    
  - name:  run shell cmd to get collection names
    shell: mongo "{{ ansible_fqdn }}":"{{ port }}"/admin -u "{{ svc_ansible_automation }}" -p "{{ svc_ansible_automation_password }}" --authenticationDatabase admin --eval 'db.getCollectionNames()' | tail -n +5 | tr ' ' '\n' | tr -d '[],' | awk NF | sed 's/\"//g' #| grep '\"'| sed '/UUID/d' | tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d'
    register: shell2_result
  
  - name:  show cmd output
    debug:
      var: shell2_result.stdout
  when: secondary.stdout == 'false'

- name:  check if pre validate file exists
  stat:
    path: /etc/mongo/pre_mongodb_validate_{{ ansible_date_time.date }}.txt
  register: file

- name:  check if post validate file exists
  stat:
    path: /etc/mongo/post_mongodb_validate_{{ ansible_date_time.date }}.txt
  register: file2
###########################################################################
#- debug:
#    var: processes.stdout
#- debug:
#    var: mongos_processes.stdout
#- debug:
#    var: shell_result.stdout
#- debug:
#    var: shell2_result.stdout

- name:  Copy the output of the process check into /etc/mongo validate file
  copy:
    content: |-
      EXISTING PROCESSES ON {{ ansible_hostname }} SERVER ARE
      {% if service_status.status.ActiveState == 'active'%}
      {{ processes.stdout }}
      {% elif service_status.status.ActiveState == 'inactive' %}
      {{ processes2.stdout }}
      {% endif %}
      {% if 'configsvr' in cluster_role %}
      {{ mongos_processes.stdout }}
      {% endif %}
      {% if secondary.stdout == 'false'%}
      EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE
      {{ shell_result.stdout }}
      COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE
      {{ shell2_result.stdout }}
      {% endif %}
    dest: "{% if not file.stat.exists %}/etc/mongo/pre_mongodb_validate_{{ ansible_date_time.date }}.txt{% elif file.stat.exists %}/etc/mongo/post_mongodb_validate_{{ ansible_date_time.date }}.txt{% endif %}"
  #when: service_status.status.ActiveState == 'active'

- name:  check if pre validate file exists
  stat:
    path: /etc/mongo/pre_mongodb_validate_{{ ansible_date_time.date }}.txt
  register: file

- name:  check if post validate file exists
  stat:
    path: /etc/mongo/post_mongodb_validate_{{ ansible_date_time.date }}.txt
  register: file2

- block:
  - name:  Generate diff
    shell: diff  <(sort /etc/mongo/pre_mongodb_validate_{{ ansible_date_time.date }}.txt)  <(sort /etc/mongo/post_mongodb_validate_{{ ansible_date_time.date }}.txt)
    register: diff_result
    ignore_errors: yes

  - name:  Show diff result
    debug:
      msg: "{{ diff_result.stdout_lines }}"

  - name:  fail module
    fail:
      msg: |-
           "Mongodb files are different from eachother"
           "{{ diff_result.stdout_lines }}"
    when: diff_result.rc !=0
  when: file.stat.exists and file2.stat.exists

# delete old files older than 90 days
- name:  find files older the 90 days old
  find:
    paths: "/etc/mongo/"
    patterns: "*mongodb_validate*"
    age: 90d
    recurse: yes
  register: validate

- name:  remove files more then 90days old
  file: 
    path: "{{ item.path }}"
    state: absent
  loop: "{{ validate.files }}"
  loop_control:
    label: 'validate'
