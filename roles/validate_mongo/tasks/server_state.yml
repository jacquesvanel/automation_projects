---
- name: find all automation files associated with mongo
  find:
    paths: 
      - "{% if service_status.status.ActiveState == 'active' %}/data/{{ env }}/{% else %}/etc/mongo/{{ env }}/{% endif %}"
    patterns: "*.conf, *.cfg"
    recurse: yes
  register: conf_files
  #when: conf_files is not defined

- debug:
    msg: "{{ conf_files.files | map(attribute='path') | list }}"
  #when: conf_files is not defined

####### run shell command against every entry in the list ########
- name: Check type of host
  shell:
    cmd: "cat {{ item }} | grep port: | awk -F ' ' '{print $2}'"
  register: get_port
  with_items: "{{ conf_files.files | map(attribute='path') | list  }}"
  ignore_errors: yes

######  map the stdout to a variable and only choose the first entry #######
- name: Extract port from output
  set_fact:
    port: "{{ get_port.results | map(attribute='stdout') | list | first }}"
###### show the entry #######
- debug:
    var: port

- name: Check type of host
  shell:
    cmd: "cat {{ item }} | grep clusterRole | sed 's/clusterRole: //g'"
  register: server_role
  with_items: "{{ conf_files.files | map(attribute='path') | list  }}"
  ignore_errors: yes

######  map the stdout to a variable and only choose the first entry #######
- name: Extract clusterRole from output
  set_fact:
    cluster_role: "{{ server_role.results | map(attribute='stdout') | list | first }}"

##### print debug msg using conditional #####
- name: show server type
  debug:
    msg: >
       "{{ ansible_hostname }}"
       {% if 'shardsvr' in cluster_role %} is a SHARD SERVER
       {% elif 'configsvr' in cluster_role %} is a CONFIG SERVER
       {% else %} is a REPLICASET SERVER{% endif %}
  ignore_errors: yes
  register: server_type

- name: check if server is primary or secondary
  shell: mongo "{{ ansible_fqdn }}":"{{ port }}"/admin  --eval 'rs.isMaster().secondary' | grep 'true\|false'
  register: secondary

- debug:
    msg: "{{ secondary.stdout }}"