---
#CHECKING THE TYPE OF MONGODB IN DEV
- name: Check type of host (for DEV envi)
  shell:
    cmd: " cat /etc/mongo/rs_a.cfg | grep -i 'clusterRole: configsvr' "
  register: config_deva
  when:
    - envi.stdout == "dev"
    - config_file_rs_a_dev.stat.exists

- name: Check type of host (for DEV shard1_rs_a envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_deva
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_a_dev.stat.exists
  ignore_errors: yes

- name: Check type of host (for DEV envi)
  shell:
    cmd: " cat /etc/mongo/rs_b.cfg | grep -i 'clusterRole: configsvr' "
  register: config_devb
  when:
    - envi.stdout == "dev"
    - config_file_rs_b_dev.stat.exists

- name: Check type of host (for DEV shard1_rs_b envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_devb
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_b_dev.stat.exists
  ignore_errors: yes

- name: Check type of host (for DEV envi)
  shell:
    cmd: " cat /etc/mongo/rs_c.cfg | grep -i 'clusterRole: configsvr' "
  register: config_devc
  when:
    - envi.stdout == "dev"
    - config_file_rs_c_dev.stat.exists

- name: Check type of host (for DEV shard1_rs_c envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_devc
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_c_dev.stat.exists
  ignore_errors: yes



#### CONFIG SERVER CHECK
- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_a_dev.stat.exists
    - "'configsvr' in config_deva.stdout"
  ignore_errors: yes
  register: config_server_type_a_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_b_dev.stat.exists
    - "'configsvr' in config_devb.stdout"
  ignore_errors: yes
  register: config_server_type_b_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dev"
     - config_file_rs_a_dev.stat.exists
    - "'configsvr' in config_devc.stdout"
  ignore_errors: yes
  register: config_server_type_c_dev

##### REPLICASET SERVER CHECK
- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a STAND ALONE SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_a_dev.stat.exists
    - config_deva.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_a_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a STAND ALONE SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_b_dev.stat.exists
    - config_devb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a STAND ALONE SERVER"
  when:
    - envi.stdout == "dev"
    - - config_file_rs_c_dev.stat.exists
    - config_devc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_dev



###### SHARDED SERVER CHECK
- name: show server type (DEV envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is part of a SHARDED CLUSTER"
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_a_dev.stat.exists
    - "'shardsvr' in shard_deva.stdout"
  ignore_errors: yes
  register: sharded_server_type_a_dev

- name: show server type (DEV envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is part of a SHARDED CLUSTER"
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_b_dev.stat.exists
    - "'shardsvr' in shard_devb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_dev

- name: show server type (DEV envi shard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is part of a SHARDED CLUSTER"
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_c_dev.stat.exists
    - "'shardsvr' in shard_devc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_dev


- name: Run shell to check the mongo services present(SHARDED CLUSTER)
  shell:
    cmd: ps -ef | grep /var/lib/mongodb-mms-automation/mongodb-linux-x86_64-5.0.13-ent/bin/mongod | awk -F " " '{print $10}' | awk 'NR<=3' | awk -F  "/" '{print $4}'
  register: sharded_processes_dev
  when: (sharded_server_type_a_dev is not skipped) or (sharded_server_type_b_dev is not skipped) or (sharded_server_type_c_dev is not skipped) and (ops_manager_check.stdout == "mongodb-mms-automation-agent.service") and (ops_manager_status.stdout == "running")


- name: Run shell to check the mongo services present (CONFIG SERVER)
  shell:
    cmd: ps -ef | grep /var/lib/mongodb-mms-automation/mongodb-linux-x86_64-5.0.13-ent/bin/mongos | awk -F " " '{print $10}' | awk -F "/" '{print $6}' | awk 'NR<=3'
  register: config_process_dev
  when: (config_server_type_a_dev is not skipped) or (config_server_type_b_dev is not skipped) or (config_server_type_c_dev is not skipped) and (ops_manager_check.stdout == "mongodb-mms-automation-agent.service") and (ops_manager_status.stdout == "running")

- name: Run shell to check the mongo services prsent (STAND ALONE SERVER)
  shell:
    cmd: ps -ef | grep /var/lib/mongodb-mms-automation/mongodb-linux-x86_64-5.0.13-ent/bin/mongod | head -1 | awk -F " " '{print $10}' | awk -F "/" '{print $4}'
  register: stand_alone_process_dev
  when:
    - sharded_processes_dev is not skipped
    - config_process_dev is not skipped
    - ops_manager_check.stdout == "mongodb-mms-automation-agent.service"
    - ops_manager_status.stdout == "running"
    - envi.stdout == "dev"    
