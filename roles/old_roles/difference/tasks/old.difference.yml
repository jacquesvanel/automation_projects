---
#CHECK THE ENVIRONMENT
- name: get env
  shell: cat /etc/serverinfo.conf | grep Environment | sed 's/Environment=//g' | tr [:upper:] [:lower:]
  register: envi
- name: show env variable
  debug:
    msg: "{{ envi.stdout }}"





             ################################################### SBX ###################################################
#CHECK THE NAME OF THE CONFIF FILE, IN SBX ENVIRONMENT
- name: Checking config file name(SBX - rs_a.cfg)
  stat:
    path: /etc/mongo/sbx/rs_a.cfg
  when: envi.stdout == "sbx"
  register: config_file_rs_a_sbx

- name: checking config file name(SBX - shard1_rs_a.cfg)
  stat:
    path: /etc/mongo/sbx/shard1_rs_a.cfg
  when: envi.stdout == "sbx"
  register: config_file_shard1_rs_a_sbx

- name: Checking config file name(SBX - rs_b.cfg)
  stat:
    path: /etc/mongo/sbx/rs_b.cfg
  when: envi.stdout == "sbx"
  register: config_file_rs_b_sbx

- name: checking config file name(SBX - shard1_rs_b.cfg)
  stat:
    path: /etc/mongo/sbx/shard1_rs_b.cfg
  when: envi.stdout == "sbx"
  register: config_file_shard1_rs_b_sbx

- name: Checking config file name(SBX - rs_c.cfg)
  stat:
    path: /etc/mongo/sbx/rs_c.cfg
  when: envi.stdout == "sbx"
  register: config_file_rs_c_sbx

- name: checking config file name(SBX - shard1_rs_c.cfg)
  stat:
    path: /etc/mongo/sbx/shard1_rs_c.cfg
  when: envi.stdout == "sbx"
  register: config_file_shard1_rs_c_sbx    


#CHECING THE TYPE OF MONGODB IN SBX
- name: Check type of host (for SBX envi)
  shell:
    cmd: "cat /etc/mongo/sbx/rs_a.cfg |  grep -i 'clusterRole: configsvr'"
  register: config_sbxa
  when:
    - envi.stdout == "sbx"
    - config_file_rs_a_sbx.stat.exists
  ignore_errors: yes
- name: Check type of host (for SBX envi)
  shell:
    cmd: "cat /etc/mongo/sbx/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_sbxa
  when:
    - envi.stdout == "sbx"
    - config_file_shard1_rs_a_sbx.stat.exists 
- name: Check type of host (for SBX envi)
  shell:
    cmd: "cat /etc/mongo/sbx/rs_b.cfg |  grep -i 'clusterRole: configsvr'"
  register: config_sbxb
  when:
    - envi.stdout == "sbx"
    - config_file_rs_b_sbx.stat.exists
  ignore_errors: yes
- name: Check type of host (for SBX envi)
  shell:
    cmd: "cat /etc/mongo/sbx/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_sbxb
  when:
    - envi.stdout == "sbx"
    - config_file_shard1_rs_b_sbx.stat.exists    
- name: Check type of host (for SBX envi)
  shell:
    cmd: "cat /etc/mongo/sbx/rs_c.cfg |  grep -i 'clusterRole: configsvr'"
  register: config_sbxc
  when:
    - envi.stdout == "sbx"
    - config_file_rs_c_sbx.stat.exists
  ignore_errors: yes
- name: Check type of host (for SBX envi)
  shell:
    cmd: "cat /etc/mongo/sbx/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_sbxc
  when:
    - envi.stdout == "sbx"
    - config_file_shard1_rs_c_sbx.stat.exists    


### CONFIG SERVER CHECK
- name: show server type (SBX envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_rs_a_sbx.stat.exists
    - "'configsvr' in config_sbxa.stdout"
  ignore_errors: yes
  register: config_server_type_a_sbx  

- name: show server type (SBX envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_rs_b_sbx.stat.exists
    - "'configsvr' in config_sbxb.stdout"
  ignore_errors: yes
  register: config_server_type_b_sbx

- name: show server type (SBX envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_rs_c_sbx.stat.exists
    - "'configsvr' in config_sbxc.stdout"
  ignore_errors: yes
  register: config_server_type_c_sbx

##### REPLICASET SERVER CHECK
- name: show server type (SBX envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_rs_a_sbx.stat.exists
    - config_sbxa.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_a_sbx

- name: show server type (SBX envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_rs_b_sbx.stat.exists
    - config_sbxb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_sbx

- name: show server type (SBX envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_rs_c_sbx.stat.exists
    - config_sbxc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_sbx

#### SHARDED    
- name: show server type (SBX envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_shard1_rs_a_sbx.stat.exists
    - "'shardsvr' not in shard_sbxa.stdout"
  ignore_errors: yes    
  register: sharded_server_type_a_sbx 

- name: show server type (SBX envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_shard1_rs_b_sbx.stat.exists
    - "'shardsvr' not in shard_sbxb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_sbx

- name: show server type (SBX envi shard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "sbx"
    - config_file_shard1_rs_c_sbx.stat.exists
    - "'shardsvr' not in shard_sbxc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_sbx
  
  



    ############################################################################################################## DSIT ######################################################################################

#CHECK THE NAME OF THE CONFIF FILE, IN DSIT ENVIRONMENT
- name: Checking config file name(DSIT - rs_a.cfg)
  stat:
    path: /etc/mongo/rs_a.cfg    
  ignore_errors: yes
  when:  envi.stdout == "dsit"
  register: config_file_rs_a_dsit
-    

- name: checking config file name(DSIT - shard1_rs_a.cfg)
  stat:
    path: /etc/mongo/shard1_rs_a.cfg
  when: envi.stdout == "dsit"
  register: config_file_shard1_rs_a_dsit

- name: Checking config file name(DSIT - rs_b.cfg)
  stat:
    path: /etc/mongo/rs_b.cfg
  ignore_errors: yes
  when:  envi.stdout == "dsit"
  register: config_file_rs_b_dsit

- name: checking config file name(DSIT - shard1_rs_b.cfg)
  stat:
    path: /etc/mongo/shard1_rs_b.cfg
  when: envi.stdout == "dsit"
  register: config_file_shard1_rs_b_dsit    

- name: Checking config file name(DSIT - rs_c.cfg)
  stat:
    path: /etc/mongo/rs_c.cfg
  ignore_errors: yes
  when:  envi.stdout == "dsit"
  register: config_file_rs_c_dsit

- name: checking config file name(DSIT - shard1_rs_c.cfg)
  stat:
    path: /etc/mongo/shard1_rs_c.cfg
  when: envi.stdout == "dsit"
  register: config_file_shard1_rs_c_dsit 

#CHECING THE TYPE OF MONGODB IN DSIT
- name: Check type of host (for DSIT envi)
  shell:
    cmd: " cat /etc/mongo/rs_a.cfg | grep -i 'clusterRole: configsvr' "
  register: config_dsita
  when:
    - envi.stdout == "dsit"
    - config_file_rs_a_dsit.stat.exists  
  ignore_errors: yes

- name: Check type of host (for DSIT envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_dsita
  when:
    - envi.stdout == "dsit"
    - config_file_shard1_rs_a_dsit.stat.exists  
  ignore_errors: yes

- name: Check type of host (for DSIT envi)
  shell:
    cmd: " cat /etc/mongo/rs_b.cfg | grep -i 'clusterRole: configsvr' "
  register: config_dsitb
  when:
    - envi.stdout == "dsit"
    - config_file_rs_b_dsit.stat.exists  
  ignore_errors: yes

- name: Check type of host (for DSIT envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_dsitb
  when:
    - envi.stdout == "dsit"
    - config_file_shard1_rs_b_dsit.stat.exists
  ignore_errors: yes

- name: Check type of host (for DSIT envi)
  shell:
    cmd: " cat /etc/mongo/rs_c.cfg | grep -i 'clusterRole: configsvr' "
  register: config_dsitc
  when:
    - envi.stdout == "dsit"
    - config_file_rs_c_dsit.stat.exists  
  ignore_errors: yes

- name: Check type of host (for DSIT envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_dsitc
  when:
    - envi.stdout == "dsit"
    - config_file_shard1_rs_c_dsit.stat.exists
  ignore_errors: yes

##### REPLICASET SERVER CHECK
- name: show server type (DSIT envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_rs_a_dsit.stat.exists
    - config_dsita.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_a_dsit

- name: show server type (DSIT envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_rs_b_dsit.stat.exists
    - config_dsitb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_dsit

- name: show server type (DSIT envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_rs_c_dsit.stat.exists
    - config_dsitc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_dsit

 ###### SHARDED SERVER CHECK
- name: show server type (DSIT envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_shard1_rs_a_dsit.stat.exists
    - "'shardsvr' in shard_dsita.stdout"
  ignore_errors: yes
  register: sharded_server_type_a_dsit

- name: show server type (DSIT envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_shard1_rs_b_dsit.stat.exists
    - "'shardsvr' in shard_dsitb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_dsit

- name: show server type (DSIT envishard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_shard1_rs_c_dsit.stat.exists
    - "'shardsvr' in shard_dsitc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_dsit

##### CONFIG SERVER CHECK
- name: show server type (DSIT envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_rs_a_dsit.stat.exists
    - "'configsvr' in config_dsita.stdout"  
  ignore_errors: yes
  register: config_server_type_a_dsit

- name: show server type (DSIT envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_rs_b_dsit.stat.exists 
    - "'configsvr' in config_dsitb.stdout"
  ignore_errors: yes
  register: config_server_type_b_dsit

- name: show server type (DSIT envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dsit"
    - config_file_rs_c_dsit.stat.exists
    - "'configsvr' in config_dsitc.stdout"
  ignore_errors: yes



    ######################################################################################################### ############# DEV #################################################################################################
#CHECK THE NAME OF THE CONFIF FILE, IN DEV ENVIRONMENT
- name: Checking config file name(DEV - rs_a.cfg)
  stat:
    path: /etc/mongo/rs_a.cfg
  ignore_errors: yes
  when:  envi.stdout == "dev"
  register: config_file_rs_a_dev
- name: checking config file name(DEV - shard1_rs_a.cfg)
  stat:
    path: /etc/mongo/shard1_rs_a.cfg
  when: envi.stdout == "dev"
  register: config_file_shard1_rs_a_dev
- name: Checking config file name(DEV - rs_b.cfg)
  stat:
    path: /etc/mongo/rs_b.cfg
  ignore_errors: yes
  when:  envi.stdout == "dev"
  register: config_file_rs_b_dev
- name: checking config file name(DEV - shard1_rs_b.cfg)
  stat:
    path: /etc/mongo/shard1_rs_b.cfg
  when: envi.stdout == "dev"
  register: config_file_shard1_rs_b_dev
- name: Checking config file name(DEV - rs_c.cfg)
  stat:
    path: /etc/mongo/rs_c.cfg
  ignore_errors: yes
  when:  envi.stdout == "dev"
  register: config_file_rs_c_dev
- name: checking config file name(DEV - shard1_rs_c.cfg)
  stat:
    path: /etc/mongo/shard1_rs_c.cfg
  when: envi.stdout == "dev"
  register: config_file_shard1_rs_c_dev




#CHECKING THE TYPE OF MONGODB IN DEV
- name: Check type of host (for DEV envi)
  shell:
    cmd: " cat /etc/mongo/rs_a.cfg | grep -i 'clusterRole: configsvr' "
  register: config_deva
  when:
    - envi.stdout == "dev"
    - config_file_rs_a_dev.stat.exists

- name: Check type of host (for DEV shard1_rs_a envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_deva
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_a_dev.stat.exists
  ignore_errors: yes

- name: Check type of host (for DEV envi)
  shell:
    cmd: " cat /etc/mongo/rs_b.cfg | grep -i 'clusterRole: configsvr' "
  register: config_devb
  when:
    - envi.stdout == "dev"
    - config_file_rs_b_dev.stat.exists

- name: Check type of host (for DEV shard1_rs_b envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_devb
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_b_dev.stat.exists
  ignore_errors: yes      

- name: Check type of host (for DEV envi)
  shell:
    cmd: " cat /etc/mongo/rs_c.cfg | grep -i 'clusterRole: configsvr' "
  register: config_devc
  when:
    - envi.stdout == "dev"
    - config_file_rs_c_dev.stat.exists

- name: Check type of host (for DEV shard1_rs_c envi)
  shell:
    cmd: "cat /etc/mongo/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_devc
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_c_dev.stat.exists
  ignore_errors: yes      


#### CONFIG SERVER CHECK
- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_a_dev.stat.exists
    - "'configsvr' in config_deva.stdout"
  ignore_errors: yes
  register: config_server_type_a_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_b_dev.stat.exists
    - "'configsvr' in config_devb.stdout"
  ignore_errors: yes
  register: config_server_type_b_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "dev"
     - config_file_rs_a_dev.stat.exists
    - "'configsvr' in config_devc.stdout"
  ignore_errors: yes
  register: config_server_type_c_dev

##### REPLICASET SERVER CHECK
- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_a_dev.stat.exists
    - config_deva.stdout == ""  
  ignore_errors: yes
  register: replicaset_server_type_a_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_rs_b_dev.stat.exists
    - config_devb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_dev

- name: show server type (DEV envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "dev"
    - - config_file_rs_c_dev.stat.exists
    - config_devc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_dev

###### SHARDED SERVER CHECK
- name: show server type (DEV envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_a_dev.stat.exists
    - "'shardsvr' in shard_deva.stdout"
  ignore_errors: yes
  register: sharded_server_type_a_dev

- name: show server type (DEV envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_b_dev.stat.exists
    - "'shardsvr' in shard_devb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_dev

- name: show server type (DEV envi shard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "dev"
    - config_file_shard1_rs_c_dev.stat.exists
    - "'shardsvr' in shard_devc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_dev



     #####################      PET     ####################
#CHECK THE NAME OF THE CONFIF FILE, IN DEV ENVIRONMENT    
- name: Checking config file name(PET - rs_a.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/rs_a.cfg
  ignore_errors: yes
  when: envi.stdout == "pet"
  register: config_file_rs_a_pet
- name: checking config file name(PET - shard1_rs_a.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_a.cfg
  when: envi.stdout == "pet"
  register: config_file_shard1_rs_a_pet
- name: Checking config file name(PET - rs_b.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/rs_b.cfg
  ignore_errors: yes
  when: envi.stdout == "pet"
  register: config_file_rs_b_pet
- name: checking config file name(PET - shard1_rs_b.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_b.cfg
  when: envi.stdout == "pet"
  register: config_file_shard1_rs_b_pet
- name: Checking config file name(PET - rs_c.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/rs_c.cfg
  ignore_errors: yes
  when: envi.stdout == "pet"
  register: config_file_rs_c_pet
- name: checking config file name(PET - shard1_rs_c.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_c.cfg
  when: envi.stdout == "pet"
  register: config_file_shard1_rs_c_pet

#CHECKING THE TYPE OF MONGODB IN PET
- name: Check type of host (for PET envi)
  shell:
    cmd: " cat /etc/mongo//pte_defunct_managed_by_ops_now/rs_a.cfg | grep -i 'clusterRole: configsvr' "
  register: config_peta
  when:
    - envi.stdout == "pet"
    - config_file_rs_a_pet.stat.exists

- name: Check type of host (for PET shard1_rs_a envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_peta
  when:
    - envi.stdout == "pet"
    - config_file_shard1_rs_a_pet.stat.exists
  ignore_errors: yes

- name: Check type of host (for PET envi)
  shell:
    cmd: " cat /etc/mongo/pte_defunct_managed_by_ops_now/rs_b.cfg | grep -i 'clusterRole: configsvr' "
  register: config_petb
  when:
    - envi.stdout == "pet"
    - config_file_rs_b_pet.stat.exists

- name: Check type of host (for PET shard1_rs_b envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_petb
  when:
    - envi.stdout == "pet"
    - config_file_shard1_rs_b_pet.stat.exists
  ignore_errors: yes

- name: Check type of host (for PET envi)
  shell:
    cmd: " cat /etc/mongo/pte_defunct_managed_by_ops_now/rs_c.cfg | grep -i 'clusterRole: configsvr' "
  register: config_petc
  when:
    - envi.stdout == "pet"
    - config_file_rs_c_pet.stat.exists

- name: Check type of host (for PET shard1_rs_c envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_petc
  when:
    - envi.stdout == "pet"
    - config_file_shard1_rs_c_pet.stat.exists
  ignore_errors: yes



#### CONFIG SERVER CHECK
- name: show server type (PET envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_rs_a_pet.stat.exists
    - "'configsvr' in config_peta.stdout"
  ignore_errors: yes
  register: config_server_type_a_pet

- name: show server type (PET envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_rs_b_pet.stat.exists
    - "'configsvr' in config_petb.stdout"
  ignore_errors: yes
  register: config_server_type_b_pet

- name: show server type (PET envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "pet"
     - config_file_rs_a_pet.stat.exists
    - "'configsvr' in config_petc.stdout"
  ignore_errors: yes
  register: config_server_type_c_pet



##### REPLICASET SERVER CHECK
- name: show server type (PET envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_rs_a_pet.stat.exists
    - config_peta.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_a_pet

- name: show server type (PET envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_rs_b_pet.stat.exists
    - config_petb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_pet

- name: show server type (PET envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "pet"
    - - config_file_rs_c_pet.stat.exists
    - config_petc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_pet



###### SHARDED SERVER CHECK
- name: show server type (PET envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_shard1_rs_a_pet.stat.exists
    - "'shardsvr' in shard_peta.stdout"
  ignore_errors: yes
  register: sharded_server_type_a_pet

- name: show server type (PET envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_shard1_rs_b_pet.stat.exists
    - "'shardsvr' in shard_petb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_pet

- name: show server type (PET envi shard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is a SHARDED SERVER"
  when:
    - envi.stdout == "pet"
    - config_file_shard1_rs_c_dev.stat.exists
    - "'shardsvr' in shard_petc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_pet




         #####################      PROD     ####################
#CHECK THE NAME OF THE CONFIF FILE, IN PROD ENVIRONMENT
- name: Checking config file name(PROD - rs_a.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/rs_a.cfg
  ignore_errors: yes
  when: envi.stdout == "prod"
  register: config_file_rs_a_prod
- name: checking config file name(PROD - shard1_rs_a.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_a.cfg
  when: envi.stdout == "prod"
  register: config_file_shard1_rs_a_prod
- name: Checking config file name(PROD - rs_b.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/rs_b.cfg
  ignore_errors: yes
  when: envi.stdout == "prod"
  register: config_file_rs_b_prod
- name: checking config file name(PROD - shard1_rs_b.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_b.cfg
  when: envi.stdout == "prod"
  register: config_file_shard1_rs_b_prod
- name: Checking config file name(PROD - rs_c.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/rs_c.cfg
  ignore_errors: yes
  when: envi.stdout == "prod"
  register: config_file_rs_c_prod
- name: checking config file name(PROD - shard1_rs_c.cfg)
  stat:
    path: /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_c.cfg
  when: envi.stdout == "prod"
  register: config_file_shard1_rs_c_prod



#CHECKING THE TYPE OF MONGODB IN PROD
- name: Check type of host (for PROD envi)
  shell:
    cmd: " cat /etc/mongo//pte_defunct_managed_by_ops_now/rs_a.cfg | grep -i 'clusterRole: configsvr' "
  register: config_proda
  when:
    - envi.stdout == "prod"
    - config_file_rs_a_prod.stat.exists

- name: Check type of host (for PROD shard1_rs_a envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_a.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_proda
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_a_prod.stat.exists
  ignore_errors: yes

- name: Check type of host (for PROD envi)
  shell:
    cmd: " cat /etc/mongo/pte_defunct_managed_by_ops_now/rs_b.cfg | grep -i 'clusterRole: configsvr' "
  register: config_prodb
  when:
    - envi.stdout == "prod"
    - config_file_rs_b_prod.stat.exists

- name: Check type of host (for PROD shard1_rs_b envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_b.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_prodb
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_b_prod.stat.exists
  ignore_errors: yes

- name: Check type of host (for PROD envi)
  shell:
    cmd: " cat /etc/mongo/pte_defunct_managed_by_ops_now/rs_c.cfg | grep -i 'clusterRole: configsvr' "
  register: config_prodc
  when:
    - envi.stdout == "prod"
    - config_file_rs_c_prod.stat.exists

- name: Check type of host (for PROD shard1_rs_c envi)
  shell:
    cmd: "cat /etc/mongo/pte_defunct_managed_by_ops_now/shard1_rs_c.cfg |  grep -i 'clusterRole: shardsvr'"
  register: shard_prodc
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_c_prod.stat.exists
  ignore_errors: yes



###### SHARDED SERVER CHECK
- name: show server type (PROD envi shard1_rs_a)
  debug:
    msg: "{{ ansible_hostname }} is a SHARD SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_a_prod.stat.exists
    - "'shardsvr' in shard_proda.stdout"
  ignore_errors: yes
  register: sharded_server_type_a_prod

- name: show server type (PROD envi shard1_rs_b)
  debug:
    msg: "{{ ansible_hostname }} is a SHARD SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_b_prod.stat.exists
    - "'shardsvr' in shard_prodb.stdout"
  ignore_errors: yes
  register: sharded_server_type_b_prod

- name: show server type (PROD envi shard1_rs_c)
  debug:
    msg: "{{ ansible_hostname }} is a SHARD SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_shard1_rs_c_prod.stat.exists
    - "'shardsvr' in shard_prodc.stdout"
  ignore_errors: yes
  register: sharded_server_type_c_prod


##### REPLICASET SERVER CHECK
- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_a_prod.stat.exists
    - config_proda.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_a_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_b_prod.stat.exists
    - config_prodb.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_b_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a REPLICASET SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_c_prod.stat.exists
    - config_prodc.stdout == ""
  ignore_errors: yes
  register: replicaset_server_type_c_prod   


   #### CONFIG SERVER CHECK
- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_a_prod.stat.exists
    - "'configsvr' in config_proda.stdout"
  ignore_errors: yes
  register: config_server_type_a_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "prod"
    - config_file_rs_b_prod.stat.exists
    - "'configsvr' in config_prodb.stdout"
  ignore_errors: yes
  register: config_server_type_b_prod

- name: show server type (PROD envi)
  debug:
    msg: "{{ ansible_hostname }} is a CONFIG SERVER"
  when:
    - envi.stdout == "prod"
     - config_file_rs_a_prod.stat.exists
    - "'configsvr' in config_prodc.stdout"
  ignore_errors: yes
  register: config_server_type_c_prod 
