---
vars:
  - Port_nmbr: 37018
  - SRVR: "{{ target_hosts }}"
  - env: dsit
#mkdir -p /tmp/MONGODB_VALIDATE
#MNG_VAL=/tmp/MONGODB_VALIDATE/post_MongoDB_Validate.txt
# --
#  DBS=`mongo ${a}:$Port_nmbr/admin -u {{ svc_ansible_automation }} -p {{ svc_ansible_automation_password }} --authenticationDatabase admin --eval 'print(db.getMongo().getDBNames())' | grep -i 'config' | sed s/","/' '/g`
  
#echo "EXISTING DATABASES ON ${a} SERVER ARE: " >> $MNG_VAL
        
#mongo ${a}:$Port_nmbr/admin -u {{ svc_ansible_automation }} -p {{ svc_ansible_automation_password }} --authenticationDatabase admin --eval 'db.getMongo().getDBNames()' | sed -e '1,4d' >> $MNG_VAL
#  echo "********************************************************************"  >> $MNG_VAL
- name: make directory for /etc/mongo/{{ env }}/scripts/
  file:
    dest: /etc/mongo/{{ env }}/scripts/
    state: directory
    owner: "{{ owner }}"
    group: "{{ group }}"

    #- name: layout template for /etc/mongo/{{ env }}/scripts/initiate.shard1.js the shard1 server
    #  template:
    #    src:  initiate.shard1.js.j2
    #    dest: "/etc/mongo/{{ env }}/scripts/initiate.shard1.js"
    #owner: root
    #group: root
    #mode: '0644'
    #force: yes

- name: initiate shard replica set
  shell: "mongo {{ target_hosts }}:37018/admin -u {{ svc_ansible_automation }} -p {{ svc_ansible_automation_password }} --authenticationDatabase admin --eval 'print(db.getMongo().getDBNames())' | grep -i 'config' | sed s/","/' '/g`"
  register: shell_result

- debug:
    msg: "{{ shell_result.stdout_lines }}"
