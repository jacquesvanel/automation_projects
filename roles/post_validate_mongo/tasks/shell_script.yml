---
###########################################################################
#Run mongo cmd that gets DB Names
- name: run shell command
  shell: "mongo {{ target_hosts }}:37018/admin -u {{ svc_ansible_automation }} -p {{ svc_ansible_automation_password }} --authenticationDatabase admin --eval 'db.getMongo().getDBNames()' | sed -e '1,4d'| tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d'"
  register: shell_result

- debug:
    msg: "{{ shell_result.stdout }}"

###########################################################################
#run cmd that gets collection names    
- name: run 2nd command
  shell: "mongo {{ target_hosts }}:37018/admin -u {{ svc_ansible_automation }} -p {{ svc_ansible_automation_password }} --authenticationDatabase admin --eval 'db.getCollectionNames()' | grep '\"'| sed '/UUID/d' | tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d'"
  register: shell2_result

- debug:
    msg: "{{ shell2_result.stdout }}"

############################################################################
#make sure directory exists
- name: check if dir exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/
  register: dir

- name: make file directory
  file:
    path: /etc/mongo/{{ env }}/scripts/
    state: directory
    #    mode: "{{ item.mode }}"
    #    owner: "{{ owner }}"
    #    group: "{{ group }}"
  when: not dir.stat.exists

- name: check if file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/pre_MongoDB_Validate.txt
  register: file

- name: check if file exists
  stat:
    path: /etc/mongo/{{ env }}/scripts/post_MongoDB_Validate.txt
  register: file2
###########################################################################
#copy output to file and display in ansible output 

- name: Copy the output of the data check into /etc/mongo
  copy:
    content: |
            EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE
            {{ shell_result.stdout }}
            COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE
            {{ shell2_result.stdout }}
    dest: "/etc/mongo/dsit/scripts/pre_MongoDB_Validate{{ ansible_date_time.date }}.txt"
  when: not file.stat.exists

- name: Copy the output of the data check into /etc/mongo
  copy:
    content: |
            EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE
            {{ shell_result.stdout }}
            COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE
            {{ shell2_result.stdout }}
    dest: "/etc/mongo/dsit/scripts/post_MongoDB_Validate{{ ansible_date_time.date }}.txt"
  when: file.stat.exists

- debug:
    msg:
      - "EXISTING DATABASES ON {{ ansible_hostname }} SERVER ARE"
      - "{{ shell_result.stdout.split('\n') }}"
      - "COLLECTIONS EXIST ON {{ ansible_hostname }} DATABASE ARE"
      - "{{ shell2_result.stdout.split('\n') }}"

- block:
  - name: Generate diff
    shell: diff  /etc/mongo/{{ env }}/scripts/pre_MongoDB_Validate{{ ansible_date_time.date }}.txt  /etc/mongo/{{ env }}/scripts/post_MongoDB_Validate{{ ansible_date_time.date }}.txt
    register: diff_result
    ignore_errors: yes

  - name: Show diff result
    debug:
      msg: "{{ diff_result.stdout_lines }}"

  - name: fail module
    fail:
      msg: |-
           "Mongodb files are different from eachother"
           "{{ diff_result.stdout_lines }}"
    when: diff_result.rc !=0
  when: file.stat.exists and file2.stat.exists

#- name: run wordcount command
    #  shell: mongo ae1rsitlmdb2101:37018/admin -u amkanda -p Qwerty#12345px --authenticationDatabase admin --eval "db.getCollectionNames()" | grep '"'| sed '/UUID/d' | tr ' ' '\n' | sed 's/\[//g' | sed 's/\]//g' | sed 's/\,//g'| sed '/^[[:space:]]*$/d' | wc -l
    #  register: wc_result

    #- debug:
    #    msg: "{{ wc_result }}"

    #- debug:
    #    msg: >
    #         {% if wc_result.stdout > 0 %}
    #         MongoDB Cluster is Currently UP and RUNNING
    #         {% else %}
    #         MongoDB cluster is Currently DOWN Please Verify
    #         {% endif %}
